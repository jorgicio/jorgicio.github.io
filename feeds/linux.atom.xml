<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jorgicio's Crib - linux</title><link href="http://jorgicio.github.io/" rel="alternate"></link><link href="http://jorgicio.github.io/feeds/linux.atom.xml" rel="self"></link><id>http://jorgicio.github.io/</id><updated>2017-08-17T22:24:00-03:00</updated><entry><title>Setup purest OpenRC in Gentoo (and other Unix-like flavours)</title><link href="http://jorgicio.github.io/setup-purest-openrc-in-gentoo-(and-other-unix-like-flavours).html" rel="alternate"></link><published>2017-08-17T22:24:00-03:00</published><updated>2017-08-17T22:24:00-03:00</updated><author><name>Jorgicio</name></author><id>tag:jorgicio.github.io,2017-08-17:/setup-purest-openrc-in-gentoo-(and-other-unix-like-flavours).html</id><summary type="html">&lt;p&gt;So you can make OpenRC no longer depend on SysVinit&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="OpenRC" src="http://jorgicio.github.io/images/openrc.jpg"&gt;&lt;/p&gt;
&lt;p&gt;As some people know, I'm a Gentoo user since some years ago. And as anybody knows, SystemD is a sort of crap and there &lt;a href="http://without-systemd.org/wiki/index.php/Arguments_against_systemd"&gt;lots for of reasons why&lt;/a&gt;. And one of the best alternatives (or the best alternative) is &lt;a href="http://en.wikipedia.org/wiki/OpenRC"&gt;OpenRC&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, I came here to show you how to use a purest OpenRC, even in front-end or back-end.&lt;/p&gt;
&lt;h2&gt;Wait a minute, isn't OpenRC already pure?&lt;/h2&gt;
&lt;p&gt;Not exactly.&lt;/p&gt;
&lt;p&gt;Do you remember the oldie SysVinit? Well, this is the init system used in many Unix-like flavours (and, of course, Linux flavours). And SystemD came as a kinda replace of SysVinit. In fact, the latter is still used by, for example, BSD flavours like FreeBSD, as SystemD can't be non-Linux compatible. Also, Linux distros such as Slackware still use it.&lt;/p&gt;
&lt;p&gt;OpenRC is the default init system used in Gentoo (as well as created by some members of that community), and being available to lots of Linux distros (and other Unix-like OS), only some other ones use it, such as Alpine Linux or Manjaro. Of course, the most complete documentation available for OpenRC is in the &lt;a href="https://wiki.gentoo.org/wiki/OpenRC"&gt;Gentoo Wiki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Well, one day, I find there you can use an alternative init binary to run it, its own init binary indeed since 0.25 release. And there are the instructions to use it. However, I found that documentation is kinda incomplete and I'll explain you later why.&lt;/p&gt;
&lt;p&gt;You must keep in mind some things before trying that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Startup may be slower than usual the first time. Don't worry, that's normal.&lt;/li&gt;
&lt;li&gt;Some binaries, i.e. &lt;code&gt;halt&lt;/code&gt; or &lt;code&gt;reboot&lt;/code&gt;, are not available because they're SysVinit-based. Instead, there's a new one called &lt;code&gt;openrc-shutdown&lt;/code&gt; which is called with an argument to make it what you expected. This will be explained later.&lt;/li&gt;
&lt;li&gt;You must use OpenRC with ConsoleKit, although they already came together. I'll explain it later too.&lt;/li&gt;
&lt;li&gt;The file &lt;code&gt;/etc/inittab&lt;/code&gt; is ignored as being part of SysVinit. Instead, the TTYs must be enabled manually using the &lt;code&gt;agetty&lt;/code&gt; daemon.&lt;/li&gt;
&lt;li&gt;All the process is painless and reversible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you've been noticed of the mentioned before, let's start!&lt;/p&gt;
&lt;p&gt;First, you must add the &lt;code&gt;init=/sbin/openrc-init&lt;/code&gt; kernel line in your bootloader. I use GRUB, so the process is easy as modify the &lt;code&gt;/etc/default/grub&lt;/code&gt; file and then regenerate the config file with &lt;code&gt;grub-mkconfig -o /boot/grub/grub.cfg&lt;/code&gt; (depending on your OS or GRUB version).&lt;/p&gt;
&lt;p&gt;Then, you must make the TTYs you're going to use enabled. As the &lt;code&gt;/etc/inittab&lt;/code&gt; is not used anymore, you can create a symlink to make it start on boot. You can create as much of symlinks as TTYs you want. For example, for the first TTY, you can do this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ln -sr /etc/init.d/agetty /etc/init.d/agetty.tty1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And then, make it start in default level:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rc-update add agetty.tty1 default&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can repeat the process with the other TTYs with changing the number in the symlink file and rc-update command.&lt;/p&gt;
&lt;p&gt;Finally, as you're using a Desktop Environment, of course you need ConsoleKit. So let's create some scripts to make it reboot or poweroff. For that, the names must be as indicated by CK and depending on what to do.&lt;/p&gt;
&lt;p&gt;For the first script (which we must be name it &lt;code&gt;ck-system-stop&lt;/code&gt;), its content must be this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#!/bin/sh
openrc-shutdown -p&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The 2nd script we must name &lt;code&gt;ck-system-reboot&lt;/code&gt; and the content is the same as the previous one, but the parameter must be &lt;code&gt;-r&lt;/code&gt; instead of &lt;code&gt;-p&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Of course, both scripts must have execution permissions assigned:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chmod +x ck-system-stop
chmod +x ck-system-reboot&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And you can copy them into the &lt;code&gt;/usr/lib/consolekit/scripts&lt;/code&gt; directory. Don't worry, permissions will remain.&lt;/p&gt;
&lt;p&gt;Now you just reboot the system and you're ready.&lt;/p&gt;
&lt;p&gt;I hope this may be helpful for every one who uses OpenRC as its init system.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Jorgicio&lt;/em&gt;&lt;/p&gt;</content><category term="linux"></category><category term="gentoo"></category></entry><entry><title>Disable GTK+ 3 CSD in non-GTK+3 desktops (e.g. MATE or XFCE)</title><link href="http://jorgicio.github.io/disable-gtk+-3-csd-in-non-gtk+3-desktops.html" rel="alternate"></link><published>2015-06-07T20:19:00-03:00</published><updated>2015-06-07T20:19:00-03:00</updated><author><name>Jorgicio</name></author><id>tag:jorgicio.github.io,2015-06-07:/disable-gtk+-3-csd-in-non-gtk+3-desktops.html</id><summary type="html">&lt;p&gt;How to ride with this crap called CSD.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="GTK+" src="http://jorgicio.github.io/images/gtk.png"&gt;&lt;/p&gt;
&lt;p&gt;As a &lt;a href="http://www.funtoo.org"&gt;Funtoo&lt;/a&gt; user, and as a &lt;a href="http://www.mate-desktop.org/"&gt;MATE&lt;/a&gt; user, I had to deal with a problem with GTK+3-based apps when I have windows composition enabled, because popup windows are not drawn correctly. The reason? &lt;a href="https://blogs.gnome.org/mclasen/2013/12/05/client-side-decorations-in-themes/"&gt;CSD&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt;lient-&lt;strong&gt;S&lt;/strong&gt;ide &lt;strong&gt;D&lt;/strong&gt;ecorations is the new feature brought by GTK+3 since 3.12, that includes its own windows composition. The problem? It cannot be disabled by default, unless you can do some tricks. The &lt;a href="https://gist.github.com/mlny/13c2597695ea2a91a5a8"&gt;CSS tweak&lt;/a&gt; doesn't work as well as we wish.&lt;/p&gt;
&lt;p&gt;While surfing through the Internet, I found &lt;a href="https://aur.archlinux.org/packages/gtk3-noforcedcsd/"&gt;that package&lt;/a&gt; in the AUR repository (from Arch Linux), from which I took 2 files that are useful for me.&lt;/p&gt;
&lt;p&gt;Luckily, the GTK 3.0 ebuild for Gentoo (and based ones) contains the epatch_user instruction, so we can just put our own patches, and let Emerge do the rest of the part. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you use any other Linux distro, you can do this too, but must patch manually, and re-compile the package from the source. Ask for the way to do for you distro.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;First, download &lt;a href="http://www.jorgicio.net/docs/gtk3nocsd/gtk_3.14_disable_csd_envvar_20141001.patch"&gt;this patch&lt;/a&gt;, and put it inside:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/etc/portage/patches/x11-libs/gtk+:3/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Create those directories if not existing.&lt;/p&gt;
&lt;p&gt;Then, recompile the GTK +3 package:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;emerge -1 gtk+:3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Don't worry, the patch is applied itself. Just wait.&lt;/p&gt;
&lt;p&gt;Meanwhile, add the right environment variable. You have 2 ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;As a system variable, download &lt;a href="http://www.jorgicio.net/docs/gtk3nocsd/gtk3csd.sh"&gt;this file&lt;/a&gt;, and put it inside &lt;code&gt;/etc/profile.d/&lt;/code&gt;. Also, if needed, add execution permissions.&lt;/li&gt;
&lt;li&gt;As an user variable. open the .profile or .xprofile file (create it if not available), and add the following line:
&lt;code&gt;export GTK_DISABLE_CSD=1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For any of those, restart the session after GTK+ 3 compiled successfully.&lt;/p&gt;
&lt;p&gt;Then, just try open any GTK+ 3 app (i.e. Transmission Torrent Client, Evolution, etc.). I tried with my Funtoo installation, using MATE and window composition enabled.&lt;/p&gt;
&lt;p&gt;As it seems, CSD is a &lt;a href="http://blog.martin-graesslin.com/blog/2010/05/why-you-should-not-use-client-side-window-decorations/"&gt;very bad idea&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Jorgicio&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;P.S. This tutorial is also available in the &lt;a href="http://forums.funtoo.org/topic/576-disable-gtk-3-csd-in-non-gtk3-desktops-eg-mate-or-xfce"&gt;Funtoo Forums&lt;/a&gt;.&lt;/p&gt;</content><category term="gtk"></category><category term="gentoo"></category><category term="linux"></category><category term="funtoo"></category><category term="compilation"></category><category term="csd"></category><category term="gnome"></category><category term="mate desktop"></category></entry></feed>